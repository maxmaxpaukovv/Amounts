import React, { useState } from 'react';
import { RepairItem, Position, GroupedRepairItem, Employee, Wire } from './types';
import { UnallocatedItemsPanel } from './components/UnallocatedItemsPanel';
import PositionCard from './components/PositionCard';
import { ImportButton } from './components/ImportButton';
import { SearchBar } from './components/SearchBar';
import { useDragAndDrop } from './hooks/useDragAndDrop';
import { useSearch } from './hooks/useSearch';
import { exportToCSV } from './utils/csvExport';
import { getBasePositionName, groupSimilarItems, ungroupItems, groupByBasePositionName } from './utils/groupingUtils';
import { Plus, Download, Settings, TrendingUp, TrendingDown } from 'lucide-react';

function App() {
  // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–±–∏—Ä–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ - –Ω–∞—á–∏–Ω–∞–µ–º —Å –ø—É—Å—Ç–æ–≥–æ –º–∞—Å—Å–∏–≤–∞
  const [unallocatedItems, setUnallocatedItems] = useState<RepairItem[]>([]);
  const [positions, setPositions] = useState<Position[]>([]);
  const [nextPositionNumber, setNextPositionNumber] = useState(1);
  const [searchQuery, setSearchQuery] = useState('');

  const {
    draggedItem,
    isDragging,
    handleDragStart,
    handleDragEnd,
    handleDrop,
    handleDropToUnallocated
  } = useDragAndDrop();

  const { filteredUnallocatedItems } = useSearch(
    unallocatedItems,
    positions,
    searchQuery
  );

  const createNewPosition = () => {
    const newPosition: Position = {
      id: `position-${Date.now()}`,
      service: '–ù–∞–∂–º–∏—Ç–µ –¥–ª—è –≤–≤–æ–¥–∞ —É—Å–ª—É–≥–∏',
      positionNumber: nextPositionNumber,
      items: [],
      totalPrice: 0,
      totalIncome: 0,
      totalExpense: 0
    };
    
    setPositions([...positions, newPosition]);
    setNextPositionNumber(nextPositionNumber + 1);
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ—Å—á–µ—Ç–∞ —Å—É–º–º –ø–æ–∑–∏—Ü–∏–∏
  const recalculatePositionTotals = (items: RepairItem[]) => {
    const totalPrice = items.reduce((sum, item) => sum + item.revenue, 0);
    const totalIncome = items
      .filter(item => item.incomeExpenseType === '–î–æ—Ö–æ–¥—ã')
      .reduce((sum, item) => sum + item.revenue, 0);
    const totalExpense = items
      .filter(item => item.incomeExpenseType === '–†–∞—Å—Ö–æ–¥—ã')
      .reduce((sum, item) => sum + Math.abs(item.revenue), 0);
    
    return { totalPrice, totalIncome, totalExpense };
  };

  // –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –∏–∑ –≥—Ä—É–ø–ø—ã —Å –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ–º –¥–æ—Ö–æ–¥–æ–≤ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤
  const createPositionFromGroup = (groupedItem: GroupedRepairItem) => {
    const basePositionName = getBasePositionName(groupedItem.positionName);
    
    // –ù–∞—Ö–æ–¥–∏–º –í–°–ï —ç–ª–µ–º–µ–Ω—Ç—ã —Å —Ç–∞–∫–∏–º –∂–µ –±–∞–∑–æ–≤—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º (–∏ –¥–æ—Ö–æ–¥—ã, –∏ —Ä–∞—Å—Ö–æ–¥—ã)
    const allRelatedItems = unallocatedItems.filter(item => 
      getBasePositionName(item.positionName) === basePositionName
    );
    
    if (allRelatedItems.length === 0) {
      alert('–ù–µ –Ω–∞–π–¥–µ–Ω—ã —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏');
      return;
    }

    console.log(`–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è "${basePositionName}":`, {
      basePositionName,
      foundItems: allRelatedItems.length,
      items: allRelatedItems.map(item => ({
        id: item.id,
        type: item.incomeExpenseType,
        revenue: item.revenue
      }))
    });

    const totals = recalculatePositionTotals(allRelatedItems);
    
    const newPosition: Position = {
      id: `position-${Date.now()}`,
      service: basePositionName, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–µ–∑ ID
      positionNumber: nextPositionNumber,
      items: allRelatedItems, // –í–∫–ª—é—á–∞–µ–º –í–°–ï —Å–≤—è–∑–∞–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
      ...totals
    };

    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é
    setPositions(prevPositions => [...prevPositions, newPosition]);
    setNextPositionNumber(nextPositionNumber + 1);
    
    // –£–¥–∞–ª—è–µ–º –í–°–ï —Å–≤—è–∑–∞–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏–∑ –Ω–µ—Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö
    setUnallocatedItems(prevItems => 
      prevItems.filter(item => 
        getBasePositionName(item.positionName) !== basePositionName
      )
    );

    console.log(`–°–æ–∑–¥–∞–Ω–∞ –ø–æ–∑–∏—Ü–∏—è "${basePositionName}" —Å ${allRelatedItems.length} —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏`);
  };

  // –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ –≥—Ä—É–ø–ø–µ (—Å—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞)
  const createIndividualPositionsFromGroup = (groupedItem: GroupedRepairItem) => {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∏—Å—Ö–æ–¥–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã
    const groupItems = ungroupItems(groupedItem, unallocatedItems);
    
    if (groupItems.length === 0) {
      alert('–ù–µ –Ω–∞–π–¥–µ–Ω—ã —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π');
      return;
    }

    const newPositions: Position[] = [];
    let currentPositionNumber = nextPositionNumber;

    // –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
    groupItems.forEach((item) => {
      const totals = recalculatePositionTotals([item]);
      
      const newPosition: Position = {
        id: `position-${Date.now()}-${currentPositionNumber}`,
        service: item.positionName, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ —Å ID
        positionNumber: currentPositionNumber,
        items: [item], // –¢–æ–ª—å–∫–æ –æ–¥–∏–Ω —ç–ª–µ–º–µ–Ω—Ç –≤ –ø–æ–∑–∏—Ü–∏–∏
        ...totals
      };

      newPositions.push(newPosition);
      currentPositionNumber++;
    });

    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –ø–æ–∑–∏—Ü–∏–∏
    setPositions(prevPositions => [...prevPositions, ...newPositions]);
    setNextPositionNumber(currentPositionNumber);
    
    // –£–¥–∞–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –∏–∑ –Ω–µ—Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö
    setUnallocatedItems(prevItems => 
      prevItems.filter(item => !groupedItem.groupedIds.includes(item.id))
    );

    console.log(`–°–æ–∑–¥–∞–Ω–æ ${newPositions.length} –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π –¥–ª—è "${groupedItem.positionName}"`);
  };

  // –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –ø–æ ID
  const handlePriceChange = (positionId: string, itemId: string, newRevenue: number) => {
    console.log('üéØ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞:', {
      positionId,
      itemId,
      newRevenue
    });

    setPositions(prevPositions => 
      prevPositions.map(position => {
        if (position.id === positionId) {
          const updatedItems = position.items.map(item => {
            // –ò–ó–ú–ï–ù–Ø–ï–ú –¢–û–õ–¨–ö–û –ö–û–ù–ö–†–ï–¢–ù–´–ô –≠–õ–ï–ú–ï–ù–¢ –ü–û –ï–ì–û ID
            if (item.id === itemId) {
              console.log(`‚úÖ –û–±–Ω–æ–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç ${itemId}:`, {
                oldRevenue: item.revenue,
                newRevenue,
                incomeExpenseType: item.incomeExpenseType
              });

              // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏ –ù–î–° (–µ—Å–ª–∏ –æ–Ω–∏ –±—ã–ª–∏)
              let newSumWithoutVAT, newVatAmount;
              if (item.revenue !== 0) {
                const vatRatio = item.vatAmount / item.revenue;
                const withoutVatRatio = item.sumWithoutVAT / item.revenue;
                newVatAmount = newRevenue * vatRatio;
                newSumWithoutVAT = newRevenue * withoutVatRatio;
              } else {
                // –ï—Å–ª–∏ —Å—Ç–∞—Ä–∞—è —Å—É–º–º–∞ –±—ã–ª–∞ 0, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏
                newSumWithoutVAT = newRevenue * 0.8; // 80% –±–µ–∑ –ù–î–°
                newVatAmount = newRevenue * 0.2; // 20% –ù–î–°
              }

              return {
                ...item,
                revenue: newRevenue,
                sumWithoutVAT: newSumWithoutVAT,
                vatAmount: newVatAmount
              };
            }
            
            // –í–°–ï –û–°–¢–ê–õ–¨–ù–´–ï –≠–õ–ï–ú–ï–ù–¢–´ –û–°–¢–ê–Æ–¢–°–Ø –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô
            console.log(`‚è∏Ô∏è –≠–ª–µ–º–µ–Ω—Ç ${item.id} –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π`);
            return item;
          });

          // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–∏–µ —Å—É–º–º—ã –ø–æ–∑–∏—Ü–∏–∏
          const totals = recalculatePositionTotals(updatedItems);
          
          console.log('üìä –ù–æ–≤—ã–µ —Å—É–º–º—ã –ø–æ–∑–∏—Ü–∏–∏:', totals);
          
          return {
            ...position,
            items: updatedItems,
            ...totals
          };
        }
        return position;
      })
    );
  };

  // –ù–û–í–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —á–∞—Å–æ–≤ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
  const handleEmployeeHoursChange = (positionId: string, itemId: string, newHours: number) => {
    console.log('‚è∞ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —á–∞—Å–æ–≤ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:', {
      positionId,
      itemId,
      newHours
    });

    setPositions(prevPositions => 
      prevPositions.map(position => {
        if (position.id === positionId) {
          const updatedItems = position.items.map(item => {
            if (item.id === itemId) {
              // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∫–∞—Ä—Ç–æ—á–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
              const isEmployeeCard = item.positionName.toLowerCase().includes('–æ–ø–ª–∞—Ç–∞ —Ç—Ä—É–¥–∞') && 
                                   item.incomeExpenseType === '–†–∞—Å—Ö–æ–¥—ã' &&
                                   item.salaryGoods.toLowerCase().includes('–∑–∞—Ä–ø–ª–∞—Ç–∞');
              
              if (!isEmployeeCard) {
                console.warn('–ü–æ–ø—ã—Ç–∫–∞ –∏–∑–º–µ–Ω–∏—Ç—å —á–∞—Å—ã –¥–ª—è –Ω–µ-—Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:', item.positionName);
                return item;
              }

              // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏
              const match = item.positionName.match(/–æ–ø–ª–∞—Ç–∞ —Ç—Ä—É–¥–∞ (\w+) \((\d+(?:\.\d+)?)\s*—á\)/i);
              if (!match) {
                console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ:', item.positionName);
                return item;
              }

              const employeeName = match[1];
              const oldHours = parseFloat(match[2]);
              
              // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞–≤–∫—É –∑–∞ —á–∞—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
              const hourlyRate = oldHours > 0 ? Math.abs(item.revenue) / oldHours : 0;
              
              if (hourlyRate <= 0) {
                console.warn('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞ –∑–∞ —á–∞—Å:', hourlyRate);
                return item;
              }

              // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–æ–≤—É—é —Å—É–º–º—É
              const newTotalAmount = hourlyRate * newHours;
              const newRevenue = -newTotalAmount; // –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è –¥–ª—è —Ä–∞—Å—Ö–æ–¥–æ–≤
              const newSumWithoutVAT = newRevenue; // –ó–∞—Ä–ø–ª–∞—Ç–∞ –æ–±—ã—á–Ω–æ –±–µ–∑ –ù–î–°
              const newVatAmount = 0; // –ù–î–° –Ω–∞ –∑–∞—Ä–ø–ª–∞—Ç—É –Ω–µ –Ω–∞—á–∏—Å–ª—è–µ—Ç—Å—è

              // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ —Å –Ω–æ–≤—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —á–∞—Å–æ–≤
              const newPositionName = item.positionName.replace(
                /\((\d+(?:\.\d+)?)\s*—á\)/i,
                `(${newHours} —á)`
              );

              // –û–±–Ω–æ–≤–ª—è–µ–º analytics8 —Ç–æ–∂–µ
              const newAnalytics8 = item.analytics8.replace(
                /\((\d+(?:\.\d+)?)\s*—á\)/i,
                `(${newHours} —á)`
              );

              console.log(`‚úÖ –û–±–Ω–æ–≤–ª—è–µ–º —á–∞—Å—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ ${employeeName}:`, {
                oldHours,
                newHours,
                hourlyRate,
                oldRevenue: item.revenue,
                newRevenue,
                oldPositionName: item.positionName,
                newPositionName
              });

              return {
                ...item,
                positionName: newPositionName,
                analytics8: newAnalytics8,
                quantity: newHours,
                revenue: newRevenue,
                sumWithoutVAT: newSumWithoutVAT,
                vatAmount: newVatAmount
              };
            }
            
            return item;
          });

          // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–∏–µ —Å—É–º–º—ã –ø–æ–∑–∏—Ü–∏–∏
          const totals = recalculatePositionTotals(updatedItems);
          
          console.log('üìä –ù–æ–≤—ã–µ —Å—É–º–º—ã –ø–æ–∑–∏—Ü–∏–∏ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —á–∞—Å–æ–≤:', totals);
          
          return {
            ...position,
            items: updatedItems,
            ...totals
          };
        }
        return position;
      })
    );
  };

  const updatePositionService = (positionId: string, newService: string) => {
    setPositions(positions.map(position => 
      position.id === positionId 
        ? { ...position, service: newService }
        : position
    ));
  };

  const deletePosition = (positionId: string) => {
    const position = positions.find(p => p.id === positionId);
    if (position) {
      // Return items to unallocated
      setUnallocatedItems([...unallocatedItems, ...position.items]);
      // Remove position
      setPositions(positions.filter(p => p.id !== positionId));
    }
  };

  const handlePositionDrop = (targetPositionId: string) => {
    handleDrop(targetPositionId, positions, unallocatedItems, setPositions, setUnallocatedItems);
  };

  const handleUnallocatedDrop = () => {
    handleDropToUnallocated(positions, unallocatedItems, setPositions, setUnallocatedItems);
  };

  const handleExport = () => {
    if (positions.length === 0) {
      alert('–ù–µ—Ç –ø–æ–∑–∏—Ü–∏–π –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞');
      return;
    }
    exportToCSV(positions);
  };

  const handleImport = (importedItems: RepairItem[]) => {
    // –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –Ω–µ—Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–º
    setUnallocatedItems(prevItems => [...prevItems, ...importedItems]);
  };

  const handleClearAll = () => {
    if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ?')) {
      setUnallocatedItems([]);
      setPositions([]);
      setNextPositionNumber(1);
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —à–∞–±–ª–æ–Ω–∞
  const handleAddNewItem = (templateItem: RepairItem, newName: string) => {
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π ID
    const newId = `new-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–∞—Ä—Ç–æ—á–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–µ —à–∞–±–ª–æ–Ω–∞
    const newItem: RepairItem = {
      ...templateItem, // –ö–æ–ø–∏—Ä—É–µ–º –≤—Å–µ —Å–≤–æ–π—Å—Ç–≤–∞ —à–∞–±–ª–æ–Ω–∞
      id: newId,
      uniqueKey: `${newId}-${newName.toLowerCase().replace(/\s+/g, '-')}`,
      positionName: `${newName}_ID_${newId}`,
      analytics8: newName,
      // –û–±–Ω—É–ª—è–µ–º —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–æ–≤–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏
      revenue: 0,
      sumWithoutVAT: 0,
      vatAmount: 0,
      quantity: 1
    };

    console.log('üÜï –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏:', {
      templateId: templateItem.id,
      newId: newItem.id,
      newName,
      workType: newItem.workType,
      salaryGoods: newItem.salaryGoods
    });

    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∫–∞—Ä—Ç–æ—á–∫—É –≤ –Ω–µ—Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–µ
    setUnallocatedItems(prevItems => [...prevItems, newItem]);
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∏–∑ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞
  const handleAddEmployeeItem = (templateItem: RepairItem, employee: Employee, hours: number) => {
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π ID
    const newId = `emp-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—É–º–º—É
    const totalAmount = employee.hourly_rate * hours;
    const sumWithoutVAT = totalAmount; // –ó–∞—Ä–ø–ª–∞—Ç–∞ –æ–±—ã—á–Ω–æ –±–µ–∑ –ù–î–°
    const vatAmount = 0; // –ù–î–° –Ω–∞ –∑–∞—Ä–ø–ª–∞—Ç—É –Ω–µ –Ω–∞—á–∏—Å–ª—è–µ—Ç—Å—è
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–∞—Ä—Ç–æ—á–∫—É —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
    const newItem: RepairItem = {
      ...templateItem, // –ö–æ–ø–∏—Ä—É–µ–º –≤—Å–µ —Å–≤–æ–π—Å—Ç–≤–∞ —à–∞–±–ª–æ–Ω–∞
      id: newId,
      uniqueKey: `${newId}-${employee.name.toLowerCase().replace(/\s+/g, '-')}-${hours}h`,
      positionName: `–û–ø–ª–∞—Ç–∞ —Ç—Ä—É–¥–∞ ${employee.name.toLowerCase()} (${hours} —á)_ID_${newId}`,
      analytics8: `–û–ø–ª–∞—Ç–∞ —Ç—Ä—É–¥–∞ ${employee.name.toLowerCase()} (${hours} —á)`,
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
      revenue: -totalAmount, // –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è —Ä–∞—Å—Ö–æ–¥–æ–≤
      sumWithoutVAT: -sumWithoutVAT,
      vatAmount: -vatAmount,
      quantity: hours,
      incomeExpenseType: '–†–∞—Å—Ö–æ–¥—ã' // –ó–∞—Ä–ø–ª–∞—Ç–∞ - —ç—Ç–æ —Ä–∞—Å—Ö–æ–¥—ã
    };

    console.log('üë∑ –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:', {
      templateId: templateItem.id,
      newId: newItem.id,
      employeeName: employee.name,
      hours,
      hourlyRate: employee.hourly_rate,
      totalAmount,
      workType: newItem.workType,
      salaryGoods: newItem.salaryGoods
    });

    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∫–∞—Ä—Ç–æ—á–∫—É –≤ –Ω–µ—Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–µ
    setUnallocatedItems(prevItems => [...prevItems, newItem]);
  };

  // –ù–û–í–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏ –ø—Ä–æ–≤–æ–¥–∞ –∏–∑ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞
  const handleAddWireItem = (templateItem: RepairItem, wire: Wire, meters: number) => {
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π ID
    const newId = `wire-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—É–º–º—É
    const totalAmount = wire.price_per_meter * meters;
    const sumWithoutVAT = totalAmount * 0.8; // 80% –±–µ–∑ –ù–î–°
    const vatAmount = totalAmount * 0.2; // 20% –ù–î–°
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–æ–¥–∞
    const wireName = `${wire.brand} ${wire.cross_section}–º–º¬≤ ${wire.insulation_type}`;
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–∞—Ä—Ç–æ—á–∫—É –ø—Ä–æ–≤–æ–¥–∞
    const newItem: RepairItem = {
      ...templateItem, // –ö–æ–ø–∏—Ä—É–µ–º –≤—Å–µ —Å–≤–æ–π—Å—Ç–≤–∞ —à–∞–±–ª–æ–Ω–∞
      id: newId,
      uniqueKey: `${newId}-${wireName.toLowerCase().replace(/\s+/g, '-')}-${meters}m`,
      positionName: `${wireName} (${meters} –º)_ID_${newId}`,
      analytics8: `${wireName} (${meters} –º)`,
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
      revenue: totalAmount,
      sumWithoutVAT: sumWithoutVAT,
      vatAmount: vatAmount,
      quantity: meters,
      incomeExpenseType: '–î–æ—Ö–æ–¥—ã' // –ü—Ä–æ–≤–æ–¥–∞ - —ç—Ç–æ –¥–æ—Ö–æ–¥—ã
    };

    console.log('üîå –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –ø—Ä–æ–≤–æ–¥–∞:', {
      templateId: templateItem.id,
      newId: newItem.id,
      wireName,
      meters,
      pricePerMeter: wire.price_per_meter,
      totalAmount,
      workType: newItem.workType,
      salaryGoods: newItem.salaryGoods
    });

    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∫–∞—Ä—Ç–æ—á–∫—É –≤ –Ω–µ—Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–µ
    setUnallocatedItems(prevItems => [...prevItems, newItem]);
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤ –ø–æ–∑–∏—Ü–∏–∏
  const handleQuantityChange = (positionId: string, groupedItem: GroupedRepairItem, newQuantity: number) => {
    const currentQuantity = groupedItem.groupedIds.length;
    const basePositionName = getBasePositionName(groupedItem.positionName);
    
    console.log('–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞:', {
      positionId,
      basePositionName,
      currentQuantity,
      newQuantity,
      groupedItemType: groupedItem.incomeExpenseType
    });
    
    if (newQuantity > currentQuantity) {
      // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ - –¥–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –∏–∑ –Ω–µ—Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö
      const itemsToAdd = newQuantity - currentQuantity;
      const availableItems = unallocatedItems.filter(item => 
        getBasePositionName(item.positionName) === basePositionName &&
        item.incomeExpenseType === groupedItem.incomeExpenseType
      );
      
      if (availableItems.length < itemsToAdd) {
        alert(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤. –î–æ—Å—Ç—É–ø–Ω–æ: ${availableItems.length}`);
        return;
      }
      
      const itemsToMove = availableItems.slice(0, itemsToAdd);
      
      console.log('–î–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã:', itemsToMove.map(item => item.id));
      
      // –£–¥–∞–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –∏–∑ –Ω–µ—Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö
      setUnallocatedItems(prevItems => 
        prevItems.filter(item => !itemsToMove.some(moveItem => moveItem.id === item.id))
      );
      
      // –î–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –ø–æ–∑–∏—Ü–∏—é
      setPositions(prevPositions => 
        prevPositions.map(position => {
          if (position.id === positionId) {
            const newItems = [...position.items, ...itemsToMove];
            const totals = recalculatePositionTotals(newItems);
            return {
              ...position,
              items: newItems,
              ...totals
            };
          }
          return position;
        })
      );
    } else if (newQuantity < currentQuantity) {
      // –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –Ω–µ—Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–µ
      const itemsToRemove = currentQuantity - newQuantity;
      
      console.log('–£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞:', itemsToRemove);
      
      // –ù–∞—Ö–æ–¥–∏–º –ø–æ–∑–∏—Ü–∏—é
      const position = positions.find(p => p.id === positionId);
      if (!position) return;
      
      // –í–ê–ñ–ù–û: –ù–∞—Ö–æ–¥–∏–º –í–°–ï —ç–ª–µ–º–µ–Ω—Ç—ã —Å —Ç–∞–∫–∏–º –∂–µ –±–∞–∑–æ–≤—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º –≤ –ø–æ–∑–∏—Ü–∏–∏
      // –ù–ï —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Ç–∏–ø—É –¥–æ—Ö–æ–¥—ã/—Ä–∞—Å—Ö–æ–¥—ã, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å –∏ —Ç–µ, –∏ –¥—Ä—É–≥–∏–µ
      const itemsWithSameName = position.items.filter(item => 
        getBasePositionName(item.positionName) === basePositionName
      );
      
      console.log('–í—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å —Ç–∞–∫–∏–º –∂–µ –Ω–∞–∑–≤–∞–Ω–∏–µ–º –≤ –ø–æ–∑–∏—Ü–∏–∏:', {
        total: itemsWithSameName.length,
        –¥–æ—Ö–æ–¥—ã: itemsWithSameName.filter(item => item.incomeExpenseType === '–î–æ—Ö–æ–¥—ã').length,
        —Ä–∞—Å—Ö–æ–¥—ã: itemsWithSameName.filter(item => item.incomeExpenseType === '–†–∞—Å—Ö–æ–¥—ã').length,
        items: itemsWithSameName.map(item => ({
          id: item.id,
          type: item.incomeExpenseType,
          revenue: item.revenue
        }))
      });
      
      // –ë–µ—Ä–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
      // –ï—Å–ª–∏ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å 1 —ç–ª–µ–º–µ–Ω—Ç –∏–∑ –≥—Ä—É–ø–ø—ã, –≥–¥–µ –µ—Å—Ç—å –∏ –¥–æ—Ö–æ–¥—ã, –∏ —Ä–∞—Å—Ö–æ–¥—ã,
      // —Ç–æ —É–¥–∞–ª—è–µ–º –ø–æ –æ–¥–Ω–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞
      const incomeItems = itemsWithSameName.filter(item => item.incomeExpenseType === '–î–æ—Ö–æ–¥—ã');
      const expenseItems = itemsWithSameName.filter(item => item.incomeExpenseType === '–†–∞—Å—Ö–æ–¥—ã');
      
      let itemsToMoveBack: RepairItem[] = [];
      
      // –ï—Å–ª–∏ –µ—Å—Ç—å –∏ –¥–æ—Ö–æ–¥—ã, –∏ —Ä–∞—Å—Ö–æ–¥—ã, —É–¥–∞–ª—è–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
      if (incomeItems.length > 0 && expenseItems.length > 0) {
        // –£–¥–∞–ª—è–µ–º –ø–æ –æ–¥–Ω–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞, –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
        const incomeToRemove = Math.min(itemsToRemove, incomeItems.length);
        const expenseToRemove = Math.min(itemsToRemove, expenseItems.length);
        
        itemsToMoveBack = [
          ...incomeItems.slice(-incomeToRemove),
          ...expenseItems.slice(-expenseToRemove)
        ];
      } else {
        // –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ç–∏–ø, –±–µ—Ä–µ–º –∏–∑ –Ω–µ–≥–æ
        itemsToMoveBack = itemsWithSameName.slice(-itemsToRemove);
      }
      
      console.log('–í–æ–∑–≤—Ä–∞—â–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã:', {
        count: itemsToMoveBack.length,
        –¥–æ—Ö–æ–¥—ã: itemsToMoveBack.filter(item => item.incomeExpenseType === '–î–æ—Ö–æ–¥—ã').length,
        —Ä–∞—Å—Ö–æ–¥—ã: itemsToMoveBack.filter(item => item.incomeExpenseType === '–†–∞—Å—Ö–æ–¥—ã').length,
        items: itemsToMoveBack.map(item => ({
          id: item.id,
          type: item.incomeExpenseType,
          revenue: item.revenue
        }))
      });
      
      // –í–ê–ñ–ù–û: –í–æ–∑–≤—Ä–∞—â–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –Ω–µ—Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–µ –ö–ê–ö –û–¢–î–ï–õ–¨–ù–´–ï —ç–ª–µ–º–µ–Ω—Ç—ã
      // –≠—Ç–æ –æ–±–µ—Å–ø–µ—á–∏—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–æ–≤ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤ –æ—Ç–¥–µ–ª—å–Ω–æ
      setUnallocatedItems(prevUnallocated => {
        const newUnallocated = [...prevUnallocated, ...itemsToMoveBack];
        console.log('–ù–æ–≤—ã–µ –Ω–µ—Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã:', newUnallocated.length);
        console.log('–í–æ–∑–≤—Ä–∞—â–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ —Ç–∏–ø–∞–º:', {
          –¥–æ—Ö–æ–¥—ã: itemsToMoveBack.filter(item => item.incomeExpenseType === '–î–æ—Ö–æ–¥—ã').length,
          —Ä–∞—Å—Ö–æ–¥—ã: itemsToMoveBack.filter(item => item.incomeExpenseType === '–†–∞—Å—Ö–æ–¥—ã').length
        });
        return newUnallocated;
      });
      
      // –£–¥–∞–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –∏–∑ –ø–æ–∑–∏—Ü–∏–∏
      setPositions(prevPositions => 
        prevPositions.map(pos => {
          if (pos.id === positionId) {
            const remainingItems = pos.items.filter(item => 
              !itemsToMoveBack.some(removeItem => removeItem.id === item.id)
            );
            
            console.log('–û—Å—Ç–∞–≤—à–∏–µ—Å—è —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –ø–æ–∑–∏—Ü–∏–∏:', remainingItems.length);
            
            const totals = recalculatePositionTotals(remainingItems);
            
            return {
              ...pos,
              items: remainingItems,
              ...totals
            };
          }
          return pos;
        })
      );
    }
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–≤–µ–ª–∏—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤ –Ω–µ—Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏—è—Ö
  const handleIncreaseQuantityUnallocated = (groupedItem: GroupedRepairItem) => {
    // –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ –Ω—É–∂–Ω–∞ –¥–ª—è –Ω–µ—Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö, —Ç–∞–∫ –∫–∞–∫ —Ç–∞–º —É–∂–µ –ø–æ–∫–∞–∑–∞–Ω—ã –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
    console.log('–£–≤–µ–ª–∏—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤ –Ω–µ—Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è');
  };

  const totalItems = positions.reduce((sum, pos) => sum + pos.items.length, 0);
  const totalValue = positions.reduce((sum, pos) => sum + pos.totalPrice, 0);
  const totalIncome = positions.reduce((sum, pos) => sum + pos.totalIncome, 0);
  const totalExpense = positions.reduce((sum, pos) => sum + pos.totalExpense, 0);

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–µ—Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö
  const hasSearchResults = searchQuery.trim() !== '';

  // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä—É–ø–ø –≤ –Ω–µ—Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö
  const groupedUnallocatedItems = groupByBasePositionName(unallocatedItems);
  const groupsCount = groupedUnallocatedItems.length;
  // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç —Å–æ–∑–¥–∞–Ω—ã
  const totalPositionsToCreate = groupedUnallocatedItems.reduce((sum, group) => sum + group.groupedIds.length, 0);

  return (
    <div className="h-screen bg-gray-100 flex flex-col">
      {/* Fixed Header */}
      <header className="bg-white border-b border-gray-200 px-6 py-4 flex-shrink-0 z-10">
        <div className="flex items-center justify-between mb-4">
          <div>
            <h1 className="text-2xl font-bold text-gray-900">–ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ–∑–∏—Ü–∏–π</h1>
            <p className="text-gray-600 mt-1">
              –°–æ–∑–¥–∞–≤–∞–π—Ç–µ –≥—Ä—É–ø–ø—ã —É—Å–ª—É–≥ –ø–æ —Ä–µ–º–æ–Ω—Ç—É —ç–ª–µ–∫—Ç—Ä–æ–¥–≤–∏–≥–∞—Ç–µ–ª–µ–π
            </p>
          </div>
          
          <div className="flex items-center space-x-4">
            <div className="text-sm text-gray-600 flex items-center space-x-4">
              <span><span className="font-medium">{totalItems}</span> –ø–æ–∑–∏—Ü–∏–π</span>
              
              {totalIncome > 0 && (
                <div className="flex items-center space-x-1">
                  <TrendingUp className="w-4 h-4 text-green-600" />
                  <span className="font-medium text-green-600">
                    {totalIncome.toLocaleString('ru-RU')} ‚ÇΩ
                  </span>
                </div>
              )}
              
              {totalExpense > 0 && (
                <div className="flex items-center space-x-1">
                  <TrendingDown className="w-4 h-4 text-red-600" />
                  <span className="font-medium text-red-600">
                    {totalExpense.toLocaleString('ru-RU')} ‚ÇΩ
                  </span>
                </div>
              )}
              
              <span className="font-medium text-blue-600">
                –ò—Ç–æ–≥–æ: {totalValue.toLocaleString('ru-RU')} ‚ÇΩ
              </span>
            </div>
            
            <div className="flex items-center space-x-2">
              <ImportButton 
                onImport={handleImport}
                disabled={isDragging}
              />
              
              <button
                onClick={createNewPosition}
                className="flex items-center space-x-2 bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors"
              >
                <Plus className="w-4 h-4" />
                <span>–î–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é</span>
              </button>
              
              <button
                onClick={handleExport}
                disabled={positions.length === 0}
                className="flex items-center space-x-2 bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-green-700 disabled:bg-gray-400 disabled:cursor-not-allowed transition-colors"
              >
                <Download className="w-4 h-4" />
                <span>–°–∫–∞—á–∞—Ç—å CSV</span>
              </button>
            </div>
          </div>
        </div>

        {/* Search Bar - —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–µ—Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π */}
        {unallocatedItems.length > 0 && (
          <div className="flex items-center justify-between">
            <div className="flex-1 max-w-md">
              <SearchBar
                searchQuery={searchQuery}
                onSearchChange={setSearchQuery}
                placeholder="–ü–æ–∏—Å–∫ –≤ –Ω–µ—Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏—è—Ö..."
              />
            </div>
            
            {hasSearchResults && (
              <div className="text-sm text-gray-600 ml-4">
                –ù–∞–π–¥–µ–Ω–æ: <span className="font-medium text-blue-600">{filteredUnallocatedItems.length}</span> –∏–∑ {unallocatedItems.length}
              </div>
            )}
          </div>
        )}
      </header>

      {/* Main Content with Sidebar */}
      <div className="flex flex-1 min-h-0">
        {/* Left Sidebar - Fixed with independent scroll */}
        <UnallocatedItemsPanel
          items={filteredUnallocatedItems}
          onDragStart={handleDragStart}
          onDrop={handleUnallocatedDrop}
          onDragOver={(e) => e.preventDefault()}
          draggedItem={draggedItem}
          draggedFromPositionId={positions.find(p => p.items.some(item => draggedItem?.groupedIds.includes(item.id)))?.id || null}
          searchQuery={searchQuery}
          totalUnallocatedCount={unallocatedItems.length}
          onIncreaseQuantity={handleIncreaseQuantityUnallocated}
          onCreatePositionFromGroup={createPositionFromGroup}
          onAddNewItem={handleAddNewItem}
          onAddEmployeeItem={handleAddEmployeeItem}
          onAddWireItem={handleAddWireItem}
        />

        {/* Right Content Area - Independent scroll */}
        <div className="flex-1 flex flex-col min-h-0">
          <main className="flex-1 p-6 overflow-y-auto">
            <div className="max-w-7xl mx-auto">
              <div className="mb-6">
                <div className="flex items-center justify-between mb-2">
                  <h2 className="text-xl font-semibold text-gray-900">–°–æ–±—Ä–∞–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏</h2>
                  {unallocatedItems.length > 0 && positions.length === 0 && (
                    <div className="text-sm text-gray-500">
                      –ù–µ—Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π: <span className="font-medium text-orange-600">{unallocatedItems.length}</span>
                      {groupsCount > 0 && (
                        <span className="ml-2">
                          ‚Ä¢ –ì—Ä—É–ø–ø: <span className="font-medium text-purple-600">{groupsCount}</span>
                          ‚Ä¢ –ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–æ: <span className="font-medium text-blue-600">{totalPositionsToCreate}</span>
                        </span>
                      )}
                    </div>
                  )}
                </div>
                
                {positions.length === 0 && (
                  <div className="text-center py-12 bg-white rounded-xl border-2 border-dashed border-gray-300">
                    <Settings className="w-12 h-12 text-gray-400 mx-auto mb-4" />
                    <p className="text-gray-600 text-lg mb-2">–ü–æ–∑–∏—Ü–∏–∏ –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω—ã</p>
                    <p className="text-gray-500 mb-4">
                      {unallocatedItems.length > 0 
                        ? groupsCount > 0 
                          ? '–ù–∞–∂–º–∏—Ç–µ —Å—Ç—Ä–µ–ª–∫—É —Ä—è–¥–æ–º —Å –≥—Ä—É–ø–ø–æ–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏'
                          : '–ù–∞–∂–º–∏—Ç–µ "–î–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é" –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏'
                        : '–ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ Excel –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã'
                      }
                    </p>
                    {unallocatedItems.length === 0 && (
                      <div className="flex items-center justify-center">
                        <ImportButton onImport={handleImport} />
                      </div>
                    )}
                  </div>
                )}
              </div>

              <div className="grid gap-6">
                {positions.map((position) => (
                  <PositionCard
                    key={position.id}
                    position={position}
                    onDragStart={(item, fromPositionId) => {
                      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º RepairItem –≤ GroupedRepairItem –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                      const groupedItem: GroupedRepairItem = {
                        ...item,
                        groupedIds: [item.id],
                        totalQuantity: item.quantity,
                        totalRevenue: item.revenue,
                        totalSumWithoutVAT: item.sumWithoutVAT,
                        totalVatAmount: item.vatAmount
                      };
                      handleDragStart(groupedItem, fromPositionId);
                    }}
                    onDrop={handlePositionDrop}
                    onDragOver={(e) => e.preventDefault()}
                    onUpdateService={updatePositionService}
                    onDeletePosition={deletePosition}
                    draggedItem={draggedItem}
                    onQuantityChange={handleQuantityChange}
                    unallocatedItems={unallocatedItems}
                    onPriceChange={handlePriceChange}
                    onEmployeeHoursChange={handleEmployeeHoursChange}
                  />
                ))}
              </div>
            </div>
          </main>
        </div>
      </div>
    </div>
  );
}

export default App;