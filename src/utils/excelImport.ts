import * as XLSX from 'xlsx';
import { RepairItem } from '../types';

export const importFromExcel = async (file: File): Promise<RepairItem[]> => {
  return new Promise((resolve, reject) => {
    const reader = new FileReader();
    
    reader.onload = (e) => {
      try {
        const data = e.target?.result;
        const workbook = XLSX.read(data, { type: 'binary' });
        const sheetName = workbook.SheetNames[0];
        const worksheet = workbook.Sheets[sheetName];
        
        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ JSON —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
        const jsonData = XLSX.utils.sheet_to_json(worksheet, { header: 1 });
        
        if (jsonData.length < 2) {
          throw new Error('–§–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏ –¥–∞–Ω–Ω—ã–µ');
        }
        
        const headers = jsonData[0] as string[];
        const rows = jsonData.slice(1) as any[][];
        
        console.log('üìã –ó–∞–≥–æ–ª–æ–≤–∫–∏ Excel —Ñ–∞–π–ª–∞:', headers);
        
        // –£–õ–£–ß–®–ï–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ —Å—Ç–æ–ª–±—Ü–æ–≤ - –∏—â–µ–º —Ç–æ—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –∏ —á–∞—Å—Ç–∏—á–Ω—ã–µ
        const getColumnIndex = (possibleNames: string[]): number => {
          // –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º —Ç–æ—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è (–±–µ–∑ —É—á–µ—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞)
          for (const name of possibleNames) {
            const exactIndex = headers.findIndex(h => 
              h && h.toString().toLowerCase().trim() === name.toLowerCase().trim()
            );
            if (exactIndex !== -1) {
              console.log(`‚úÖ –ù–∞–π–¥–µ–Ω —Ç–æ—á–Ω—ã–π —Å—Ç–æ–ª–±–µ—Ü "${name}" –≤ –ø–æ–∑–∏—Ü–∏–∏ ${exactIndex}: "${headers[exactIndex]}"`);
              return exactIndex;
            }
          }
          
          // –ó–∞—Ç–µ–º –∏—â–µ–º —á–∞—Å—Ç–∏—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
          for (const name of possibleNames) {
            const partialIndex = headers.findIndex(h => 
              h && h.toString().toLowerCase().includes(name.toLowerCase())
            );
            if (partialIndex !== -1) {
              console.log(`‚ö†Ô∏è –ù–∞–π–¥–µ–Ω —á–∞—Å—Ç–∏—á–Ω—ã–π —Å—Ç–æ–ª–±–µ—Ü "${name}" –≤ –ø–æ–∑–∏—Ü–∏–∏ ${partialIndex}: "${headers[partialIndex]}"`);
              return partialIndex;
            }
          }
          
          console.log(`‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω —Å—Ç–æ–ª–±–µ—Ü –¥–ª—è: ${possibleNames.join(', ')}`);
          return -1;
        };
        
        const columnIndices = {
          id: getColumnIndex(['ID', 'id']),
          uniqueKey: getColumnIndex(['–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á', 'Unique Key', 'UniqueKey']),
          positionName: getColumnIndex(['–ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏', 'Position Name', 'Position', '–ü–æ–∑–∏—Ü–∏—è']),
          year: getColumnIndex(['–ì–æ–¥', 'Year']),
          month: getColumnIndex(['–ú–µ—Å—è—Ü', 'Month']),
          quarter: getColumnIndex(['–ö–≤–∞—Ä—Ç–∞–ª', 'Quarter']),
          date: getColumnIndex(['–î–∞—Ç–∞', 'Date']),
          // –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ø–æ–∏—Å–∫ –ø–æ–ª–µ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ - –∏—â–µ–º —Ç–æ—á–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è
          analytics1: getColumnIndex(['–ê–Ω–∞–ª–∏—Ç–∏–∫–∞1', 'Analytics1', '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ 1']),
          analytics2: getColumnIndex(['–ê–Ω–∞–ª–∏—Ç–∏–∫–∞2', 'Analytics2', '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ 2']),
          analytics3: getColumnIndex(['–ê–Ω–∞–ª–∏—Ç–∏–∫–∞3', 'Analytics3', '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ 3']),
          analytics4: getColumnIndex(['–ê–Ω–∞–ª–∏—Ç–∏–∫–∞4', 'Analytics4', '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ 4']),
          analytics5: getColumnIndex(['–ê–Ω–∞–ª–∏—Ç–∏–∫–∞5', 'Analytics5', '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ 5']),
          analytics6: getColumnIndex(['–ê–Ω–∞–ª–∏—Ç–∏–∫–∞6', 'Analytics6', '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ 6']),
          analytics7: getColumnIndex(['–ê–Ω–∞–ª–∏—Ç–∏–∫–∞7', 'Analytics7', '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ 7']),
          analytics8: getColumnIndex(['–ê–Ω–∞–ª–∏—Ç–∏–∫–∞8', 'Analytics8', '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ 8']),
          debitAccount: getColumnIndex(['–°—á–µ—Ç –î—Ç', 'Debit Account', 'Debit']),
          creditAccount: getColumnIndex(['–°—á–µ—Ç –ö—Ç', 'Credit Account', 'Credit']),
          revenue: getColumnIndex(['–í—ã—Ä—É—á–∫–∞', 'Revenue']),
          quantity: getColumnIndex(['–ö–æ–ª-–≤–æ', 'Quantity', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ']),
          sumWithoutVAT: getColumnIndex(['–°—É–º–º–∞ –±–µ–∑ –ù–î–°', 'Sum without VAT', '–°—É–º–º–∞ –±–µ–∑ –ù–î–° –≤ —Ä—É–±']),
          vatAmount: getColumnIndex(['–ù–î–° –≤ —Ä—É–±', 'VAT Amount', '–ù–î–°']),
          workType: getColumnIndex(['–°—Ç–∞—Ç—å—è —Ä–∞–±–æ—Ç', 'Work Type']),
          incomeExpenseType: getColumnIndex(['–î–æ—Ö–æ–¥—ã/–†–∞—Å—Ö–æ–¥—ã', 'Income/Expense']),
          salaryGoods: getColumnIndex(['–ó–∞—Ä–ø–ª–∞—Ç–∞/–¢–æ–≤–∞—Ä—ã', 'Salary/Goods'])
        };
        
        console.log('üîç –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã —Å—Ç–æ–ª–±—Ü–æ–≤:', columnIndices);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        const requiredFields = ['id', 'positionName', 'revenue'];
        const missingFields = requiredFields.filter(field => columnIndices[field as keyof typeof columnIndices] === -1);
        
        if (missingFields.length > 0) {
          throw new Error(`–ù–µ –Ω–∞–π–¥–µ–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã: ${missingFields.join(', ')}`);
        }
        
        const items: RepairItem[] = [];
        
        rows.forEach((row, index) => {
          try {
            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
            if (!row || row.every(cell => !cell && cell !== 0)) {
              return;
            }
            
            const getValue = (colIndex: number, defaultValue: any = '') => {
              if (colIndex === -1) return defaultValue;
              const value = row[colIndex];
              return value !== undefined && value !== null ? value : defaultValue;
            };
            
            const getStringValue = (colIndex: number, defaultValue: string = '') => {
              const value = getValue(colIndex, defaultValue);
              const stringValue = value ? value.toString().trim() : defaultValue;
              
              // –õ–æ–≥–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
              if (colIndex !== -1 && headers[colIndex] && headers[colIndex].toLowerCase().includes('–∞–Ω–∞–ª–∏—Ç–∏–∫–∞')) {
                console.log(`üìä ${headers[colIndex]} (—Å—Ç–æ–ª–±–µ—Ü ${colIndex}):`, `"${stringValue}"`);
              }
              
              return stringValue;
            };
            
            const getNumberValue = (colIndex: number, defaultValue: number = 0) => {
              const value = getValue(colIndex, defaultValue);
              if (typeof value === 'number') return value;
              if (typeof value === 'string') {
                // –ó–∞–º–µ–Ω—è–µ–º –∑–∞–ø—è—Ç—ã–µ –Ω–∞ —Ç–æ—á–∫–∏ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞
                const cleanValue = value.replace(',', '.');
                const parsed = parseFloat(cleanValue);
                return isNaN(parsed) ? defaultValue : parsed;
              }
              return defaultValue;
            };
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –¥–æ—Ö–æ–¥—ã/—Ä–∞—Å—Ö–æ–¥—ã
            let incomeExpenseType: '–î–æ—Ö–æ–¥—ã' | '–†–∞—Å—Ö–æ–¥—ã' = '–î–æ—Ö–æ–¥—ã';
            const incomeExpenseValue = getStringValue(columnIndices.incomeExpenseType);
            if (incomeExpenseValue.toLowerCase().includes('—Ä–∞—Å—Ö–æ–¥')) {
              incomeExpenseType = '–†–∞—Å—Ö–æ–¥—ã';
            }
            
            const item: RepairItem = {
              id: getStringValue(columnIndices.id, `item_${index + 1}`),
              uniqueKey: getStringValue(columnIndices.uniqueKey),
              positionName: getStringValue(columnIndices.positionName),
              year: getNumberValue(columnIndices.year, new Date().getFullYear()),
              month: getNumberValue(columnIndices.month, new Date().getMonth() + 1),
              quarter: getStringValue(columnIndices.quarter, 'Q1'),
              date: getStringValue(columnIndices.date, new Date().toISOString().split('T')[0]),
              // –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï —á—Ç–µ–Ω–∏–µ –ø–æ–ª–µ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
              analytics1: getStringValue(columnIndices.analytics1),
              analytics2: getStringValue(columnIndices.analytics2),
              analytics3: getStringValue(columnIndices.analytics3),
              analytics4: getStringValue(columnIndices.analytics4),
              analytics5: getStringValue(columnIndices.analytics5),
              analytics6: getStringValue(columnIndices.analytics6),
              analytics7: getStringValue(columnIndices.analytics7),
              analytics8: getStringValue(columnIndices.analytics8),
              debitAccount: getStringValue(columnIndices.debitAccount),
              creditAccount: getStringValue(columnIndices.creditAccount),
              revenue: getNumberValue(columnIndices.revenue),
              quantity: getNumberValue(columnIndices.quantity, 1),
              sumWithoutVAT: getNumberValue(columnIndices.sumWithoutVAT),
              vatAmount: getNumberValue(columnIndices.vatAmount),
              workType: getStringValue(columnIndices.workType),
              incomeExpenseType,
              salaryGoods: getStringValue(columnIndices.salaryGoods)
            };
            
            // –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            if (index < 3) {
              console.log(`üìù –≠–ª–µ–º–µ–Ω—Ç ${index + 1}:`, {
                id: item.id,
                analytics1: item.analytics1,
                analytics2: item.analytics2,
                analytics3: item.analytics3,
                analytics8: item.analytics8
              });
            }
            
            items.push(item);
          } catch (error) {
            console.warn(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–æ–∫–∏ ${index + 2}:`, error);
          }
        });
        
        if (items.length === 0) {
          throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–π –∑–∞–ø–∏—Å–∏');
        }
        
        console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${items.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤`);
        console.log('üîç –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∏–∑ –ø–µ—Ä–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞:', {
          analytics1: items[0]?.analytics1,
          analytics2: items[0]?.analytics2,
          analytics3: items[0]?.analytics3,
          analytics8: items[0]?.analytics8
        });
        
        resolve(items);
      } catch (error) {
        reject(error);
      }
    };
    
    reader.onerror = () => {
      reject(new Error('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞'));
    };
    
    reader.readAsBinaryString(file);
  });
};